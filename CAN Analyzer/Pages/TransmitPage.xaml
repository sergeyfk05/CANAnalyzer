<UserControl x:Class="CANAnalyzer.Pages.TransmitPage"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity" 
             xmlns:resources="clr-namespace:CANAnalyzer.Resources.DynamicResources"
             xmlns:models="clr-namespace:CANAnalyzer.Models"
             xmlns:vm="clr-namespace:CANAnalyzer.VM"
             xmlns:local="clr-namespace:CANAnalyzer.Pages"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.DataContext>
        <vm:TransmitPageVM/>
    </UserControl.DataContext>
    <UserControl.Resources>
        <Style x:Key="TransmitPageIconButtonStyle">
            <Setter Property="Control.Background">
                <Setter.Value>
                    <LinearGradientBrush>
                        <GradientStop Color="{resources:Theme TransmitPageIconButtonBackgroundStartBrush}" Offset="0"/>
                        <GradientStop Color="{resources:Theme TransmitPageIconButtonBackgroundStopBrush}" Offset="1"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="Control.BorderThickness" Value="{resources:Theme TransmitPageIconButtonBorderThickness}"/>
            <Setter Property="Control.BorderBrush">
                <Setter.Value>
                    <LinearGradientBrush>
                        <GradientStop Color="{resources:Theme TransmitPageIconButtonBorderStartBrush}" Offset="0"/>
                        <GradientStop Color="{resources:Theme TransmitPageIconButtonBorderStopBrush}" Offset="1"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="Control.Width" Value="30"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border CornerRadius="{resources:Theme TransmitPageIconButtonCornerRaduis}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Button.IsMouseOver" Value="True">
                    <Setter Property="Control.Background">
                        <Setter.Value>
                            <LinearGradientBrush>
                                <GradientStop Color="{resources:Theme TransmitPageIconButtonMouseEnterBackgroundStartBrush}" Offset="0"/>
                                <GradientStop Color="{resources:Theme TransmitPageIconButtonMouseEnterBackgroundStopBrush}" Offset="1"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="TransmitPageIconButtonImageStyle">
            <Setter Property="Control.Width" Value="15"/>
            <Setter Property="Control.Height" Value="15"/>
        </Style>
    </UserControl.Resources>

    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="50"/>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>

        <DockPanel Grid.Row="0" 
                   Grid.ColumnSpan="2"  
                   Height="30"
                   VerticalAlignment="Center" 
                   HorizontalAlignment="Stretch">
            
            <Button x:Name="openButton" 
                    DockPanel.Dock="Left" 
                    Style="{DynamicResource TransmitPageIconButtonStyle}">
                <Image Style="{DynamicResource TransmitPageIconButtonImageStyle}" 
                       Source="{resources:Theme TransmitPageOpenButtonIcon}"/>

                <Button.ToolTip>
                    <ToolTip Content="{resources:Language TransmitPageOpenButtonToolTip}"/>
                </Button.ToolTip>
            </Button>

            <Button x:Name="saveButton" 
                    DockPanel.Dock="Left" 
                    Style="{DynamicResource TransmitPageIconButtonStyle}">
                <Image Style="{DynamicResource TransmitPageIconButtonImageStyle}" 
                       Source="{resources:Theme TransmitPageSaveButtonIcon}"/>

                <Button.ToolTip>
                    <ToolTip Content="{resources:Language TransmitPageSaveButtonToolTip}"/>
                </Button.ToolTip>
            </Button>

            <Button x:Name="clearButton" 
                    DockPanel.Dock="Left" 
                    Style="{DynamicResource TransmitPageIconButtonStyle}">
                <Image Style="{DynamicResource TransmitPageIconButtonImageStyle}" 
                       Source="{resources:Theme TransmitPageClearButtonIcon}"/>

                <Button.ToolTip>
                    <ToolTip Content="{resources:Language TransmitPageClearButtonToolTip}"/>
                </Button.ToolTip>
            </Button>


            <ComboBox x:Name="box" 
                      DockPanel.Dock="Right"
                      Height="30" 
                      Width="150" 
                      ItemsSource="{Binding TransmitToItems}">
                
                <ComboBox.ItemTemplate>
                    <DataTemplate DataType="{x:Type models:TransmitToViewData}">
                        <Grid Height="23">
                            <TextBlock Text="{resources:Language TransmitToControlPreviewText}" 
                                       VerticalAlignment="Center" 
                                       FontSize="{resources:Theme TransmitToControlToggleButtonFontSize}" 
                                       FontFamily="{resources:Theme TransmitToControlToggleButtonFontFamily}" 
                                       FontWeight="{resources:Theme TransmitToControlToggleButtonFontWeight}"
                                       Foreground="{resources:Theme TransmitToControlToggleButtonFontColor}"/>
                        </Grid>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
                
                <ComboBox.ItemContainerStyle>
                    <Style TargetType="{x:Type ComboBoxItem}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                                    <Border BorderThickness="1"
                                                HorizontalAlignment="Stretch">
                                            <Border.BorderBrush>
                                                <LinearGradientBrush>
                                                    <GradientStop Offset="0" Color="{resources:Theme TransmitToControlBorderBrushStart}"/>
                                                    <GradientStop Offset="1" Color="{resources:Theme TransmitToControlBorderBrushStop}"/>
                                                </LinearGradientBrush>
                                            </Border.BorderBrush>

                                        <StackPanel Orientation="Horizontal" 
                                                HorizontalAlignment="Stretch"                                                
                                                Height="30">
                                            <StackPanel.Background>
                                                <LinearGradientBrush>
                                                    <GradientStop Offset="0" Color="{resources:Theme TransmitToControlItemBackgroundBrushStart}"/>
                                                    <GradientStop Offset="1" Color="{resources:Theme TransmitToControlItemBackgroundBrushStop}"/>
                                                </LinearGradientBrush>
                                            </StackPanel.Background>
                                            
                                            <CheckBox IsChecked="{Binding IsTransmit}"
                                                  VerticalAlignment="Center"
                                                  Margin="10 0 10 0"/>
                                            <TextBlock Text="{resources:Language KeyBinding={Binding DescriptionKey}}"
                                                   FontSize="{resources:Theme TransmitToControlFontSize}" 
                                                   FontFamily="{resources:Theme TransmitToControlFontFamily}" 
                                                   FontWeight="{resources:Theme TransmitToControlFontWeight}"
                                                   Foreground="{resources:Theme TransmitToControlFontColor}"
                                                   VerticalAlignment="Center"/>
                                        </StackPanel>
                                    </Border>
                                    
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ComboBox.ItemContainerStyle>


                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="SelectionChanged">
                        <i:InvokeCommandAction Command="{Binding TransmitToComboBoxSelected}" 
                                               CommandParameter="{Binding ElementName=box}"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="Loaded">
                        <i:InvokeCommandAction Command="{Binding TransmitToComboBoxSelected}" 
                                               CommandParameter="{Binding ElementName=box}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </ComboBox>

        </DockPanel>


        <DataGrid 
            Grid.Column="0" 
            Grid.Row="1" 
            VerticalAlignment="Stretch" 
            HorizontalAlignment="Stretch"/>
    </Grid>
</UserControl>
